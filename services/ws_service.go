package services

import (
	"fmt"
	"log"
	"time"

	"new/config"
	"new/models"

	"github.com/olahol/melody"
	"gorm.io/gorm"
)

func UpdateDailyRevenue() error {
	query := `
		INSERT INTO user_revenues (user_id, date, revenue, order_count, created_at, updated_at)
		SELECT 
			invoices.admin_id AS user_id,
			DATE(orders.created_at) AS date,
			SUM(invoices.total_amount) AS revenue,
			COUNT(invoices.id) AS order_count,
			NOW() AS created_at,
			NOW() AS updated_at
		FROM invoices
		JOIN orders ON invoices.order_id = orders.id
		GROUP BY invoices.admin_id, DATE(orders.created_at)
		ON CONFLICT (user_id, date)
		DO UPDATE SET 
			revenue = EXCLUDED.revenue,
			order_count = EXCLUDED.order_count,
			updated_at = NOW();
	`

	if err := config.DB.Exec(query).Error; err != nil {
		log.Printf("‚ùå L·ªói c·∫≠p nh·∫≠t doanh thu h√†ng ng√†y: %v", err)
		return fmt.Errorf("updateDailyRevenue error: %w", err)
	}

	log.Printf("‚úÖ C·∫≠p nh·∫≠t doanh thu h√†ng ng√†y th√†nh c√¥ng l√∫c %v", time.Now())
	return nil
}

// GetTodayUserRevenue l·∫•y danh s√°ch doanh thu trong ng√†y h√¥m nay
func GetTodayUserRevenue() ([]models.UserRevenue, error) {
	var revenues []models.UserRevenue
	today := time.Now().Format("2006-01-02")

	err := config.DB.Where("date = ?", today).Find(&revenues).Error
	if err != nil {
		return nil, fmt.Errorf("‚ùå L·ªói khi truy v·∫•n doanh thu ng√†y hi·ªán t·∫°i: %w", err)
	}

	return revenues, nil
}

// UpdateUserAmounts c·∫≠p nh·∫≠t amount c·ªßa user d·ª±a tr√™n revenue h√¥m nay
func UpdateUserAmounts(m *melody.Melody) error {
	db := config.DB

	revenues, err := GetTodayUserRevenue()
	if err != nil {
		log.Println("‚ùå L·ªói l·∫•y doanh thu:", err)
		return err
	}

	if len(revenues) == 0 {
		log.Println("‚ÑπÔ∏è Kh√¥ng c√≥ doanh thu n√†o ƒë·ªÉ c·∫≠p nh·∫≠t h√¥m nay.")
		return nil
	}

	// B·∫Øt ƒë·∫ßu transaction
	tx := db.Begin()

	for _, rev := range revenues {
		adjustedRevenue := rev.Revenue * 0.7

		if err := tx.Model(&models.User{}).
			Where("id = ?", rev.UserID).
			Update("amount", gorm.Expr("amount + ?", adjustedRevenue)).Error; err != nil {
			tx.Rollback() // N·∫øu c√≥ l·ªói, rollback transaction
			log.Printf("‚ùå L·ªói c·∫≠p nh·∫≠t amount cho user %d: %v\n", rev.UserID, err)
			return err
		}
		log.Printf("‚úÖ C·∫≠p nh·∫≠t th√†nh c√¥ng user_id %d: +%.2f\n", rev.UserID, rev.Revenue)

		//th√¥ng b√°o
		message := fmt.Sprintf("üîî User %d ƒë√£ ƒë∆∞·ª£c c·ªông %.2f v√†o t√†i kho·∫£n.", rev.UserID, rev.Revenue)
		m.Broadcast([]byte(message))
	}

	tx.Commit()

	log.Println("‚úÖ Ho√†n t·∫•t c·∫≠p nh·∫≠t amount cho t·∫•t c·∫£ users.")
	return nil
}
